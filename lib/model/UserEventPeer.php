<?php



/**
 * Skeleton subclass for performing query and update operations on the 'user_event' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Sat May 18 13:22:50 2013
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class UserEventPeer extends BaseUserEventPeer
{


	public static function getAll() {


		$c = new Criteria();
		$dbEvents = self::doSelect($c);
		$events = array();
		foreach($dbEvents as $dbEvent) {
				$user = UserPeer::retrieveByPK($dbEvent->getUserId());
				$_event = Facebook::get()->getEvent($dbEvent->getFacebookEventId(), $user->getLongToken());
				
				
				$event = new Event();
				if(isset($_event['name']))
					$event->setName($_event['name']);

				if(isset($_event['start_time']))
					$event->setStart($_event['start_time']);

				if(isset($_event['end_time']))
					$event->setEnd($_event['end_time']);

				if(isset($_event['timezone']))
					$event->setTimezone($_event['timezone']);

				if(isset($_event['location']))
					$event->setLocation($_event['location']);

				if(isset($_event['id']))
					$event->setFacebookId($_event['id']);

				if(isset($_event['id']))
					$event->setPicture("http://graph.facebook.com/".$_event['id']."/picture");

				if(isset($_event['description']))
					$event->setDescription($_event['description']);

				

				$event->setUser($user);
				$event->setIsPublic(true);
				$event->setIsInvited(false);
				$event->setIsFollow(false);
				
				$invited = Facebook::get()->getInvited($event->getFacebookId(), $event->getUser()->getLongToken());
				if(isset($invited['data'])) {
					foreach ($invited['data'] as $key => $value) {
						if($value['id'] == Facebook::get()->getUser()->getFacebookId() && $value['rsvp_status'] == 'attending') {
							$event->setIsFollow(true);
							

						} 
						if($value['id'] == Facebook::get()->getUser()->getFacebookId()) {
							$event->setIsInvited(true);

						}

					}	
				}
				

				if(isset($_event['privacy'])) {
					if($_event['privacy'] == "SECRET") {
						$event->setIsPublic(false);
					}
				}
				$event->setFoundation($dbEvent->getFoundation());
				$events[] = $event;	
		}
		
		return $events;
	}

	public static function getByFacebookId($id) {
		if(is_null($id))
			return null;
		
		$c = new Criteria();
		$c->add(self::FACEBOOK_EVENT_ID, $id);
		$row = self::doSelectOne($c);
		return $row;
	} 
}
