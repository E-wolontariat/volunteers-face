<?php


/**
 * Base class that represents a query for the 'foundation' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Sun May 19 13:05:12 2013
 *
 * @method FoundationQuery orderById($order = Criteria::ASC) Order by the id column
 * @method FoundationQuery orderByName($order = Criteria::ASC) Order by the name column
 * @method FoundationQuery orderByAddressLine1($order = Criteria::ASC) Order by the address_line1 column
 * @method FoundationQuery orderByAddressLine2($order = Criteria::ASC) Order by the address_line2 column
 * @method FoundationQuery orderByEmail($order = Criteria::ASC) Order by the email column
 * @method FoundationQuery orderByPhone($order = Criteria::ASC) Order by the phone column
 * @method FoundationQuery orderByDescription($order = Criteria::ASC) Order by the description column
 * @method FoundationQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method FoundationQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 *
 * @method FoundationQuery groupById() Group by the id column
 * @method FoundationQuery groupByName() Group by the name column
 * @method FoundationQuery groupByAddressLine1() Group by the address_line1 column
 * @method FoundationQuery groupByAddressLine2() Group by the address_line2 column
 * @method FoundationQuery groupByEmail() Group by the email column
 * @method FoundationQuery groupByPhone() Group by the phone column
 * @method FoundationQuery groupByDescription() Group by the description column
 * @method FoundationQuery groupByUpdatedAt() Group by the updated_at column
 * @method FoundationQuery groupByCreatedAt() Group by the created_at column
 *
 * @method FoundationQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method FoundationQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method FoundationQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method FoundationQuery leftJoinPage($relationAlias = null) Adds a LEFT JOIN clause to the query using the Page relation
 * @method FoundationQuery rightJoinPage($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Page relation
 * @method FoundationQuery innerJoinPage($relationAlias = null) Adds a INNER JOIN clause to the query using the Page relation
 *
 * @method FoundationQuery leftJoinUserEvent($relationAlias = null) Adds a LEFT JOIN clause to the query using the UserEvent relation
 * @method FoundationQuery rightJoinUserEvent($relationAlias = null) Adds a RIGHT JOIN clause to the query using the UserEvent relation
 * @method FoundationQuery innerJoinUserEvent($relationAlias = null) Adds a INNER JOIN clause to the query using the UserEvent relation
 *
 * @method Foundation findOne(PropelPDO $con = null) Return the first Foundation matching the query
 * @method Foundation findOneOrCreate(PropelPDO $con = null) Return the first Foundation matching the query, or a new Foundation object populated from the query conditions when no match is found
 *
 * @method Foundation findOneById(int $id) Return the first Foundation filtered by the id column
 * @method Foundation findOneByName(string $name) Return the first Foundation filtered by the name column
 * @method Foundation findOneByAddressLine1(string $address_line1) Return the first Foundation filtered by the address_line1 column
 * @method Foundation findOneByAddressLine2(string $address_line2) Return the first Foundation filtered by the address_line2 column
 * @method Foundation findOneByEmail(string $email) Return the first Foundation filtered by the email column
 * @method Foundation findOneByPhone(string $phone) Return the first Foundation filtered by the phone column
 * @method Foundation findOneByDescription(string $description) Return the first Foundation filtered by the description column
 * @method Foundation findOneByUpdatedAt(string $updated_at) Return the first Foundation filtered by the updated_at column
 * @method Foundation findOneByCreatedAt(string $created_at) Return the first Foundation filtered by the created_at column
 *
 * @method array findById(int $id) Return Foundation objects filtered by the id column
 * @method array findByName(string $name) Return Foundation objects filtered by the name column
 * @method array findByAddressLine1(string $address_line1) Return Foundation objects filtered by the address_line1 column
 * @method array findByAddressLine2(string $address_line2) Return Foundation objects filtered by the address_line2 column
 * @method array findByEmail(string $email) Return Foundation objects filtered by the email column
 * @method array findByPhone(string $phone) Return Foundation objects filtered by the phone column
 * @method array findByDescription(string $description) Return Foundation objects filtered by the description column
 * @method array findByUpdatedAt(string $updated_at) Return Foundation objects filtered by the updated_at column
 * @method array findByCreatedAt(string $created_at) Return Foundation objects filtered by the created_at column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseFoundationQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseFoundationQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Foundation', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new FoundationQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     FoundationQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return FoundationQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof FoundationQuery) {
            return $criteria;
        }
        $query = new FoundationQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Foundation|Foundation[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = FoundationPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(FoundationPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Foundation A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `NAME`, `ADDRESS_LINE1`, `ADDRESS_LINE2`, `EMAIL`, `PHONE`, `DESCRIPTION`, `UPDATED_AT`, `CREATED_AT` FROM `foundation` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Foundation();
            $obj->hydrate($row);
            FoundationPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Foundation|Foundation[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Foundation[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return FoundationQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(FoundationPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return FoundationQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(FoundationPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return FoundationQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(FoundationPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the name column
     *
     * Example usage:
     * <code>
     * $query->filterByName('fooValue');   // WHERE name = 'fooValue'
     * $query->filterByName('%fooValue%'); // WHERE name LIKE '%fooValue%'
     * </code>
     *
     * @param     string $name The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return FoundationQuery The current query, for fluid interface
     */
    public function filterByName($name = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($name)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $name)) {
                $name = str_replace('*', '%', $name);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(FoundationPeer::NAME, $name, $comparison);
    }

    /**
     * Filter the query on the address_line1 column
     *
     * Example usage:
     * <code>
     * $query->filterByAddressLine1('fooValue');   // WHERE address_line1 = 'fooValue'
     * $query->filterByAddressLine1('%fooValue%'); // WHERE address_line1 LIKE '%fooValue%'
     * </code>
     *
     * @param     string $addressLine1 The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return FoundationQuery The current query, for fluid interface
     */
    public function filterByAddressLine1($addressLine1 = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($addressLine1)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $addressLine1)) {
                $addressLine1 = str_replace('*', '%', $addressLine1);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(FoundationPeer::ADDRESS_LINE1, $addressLine1, $comparison);
    }

    /**
     * Filter the query on the address_line2 column
     *
     * Example usage:
     * <code>
     * $query->filterByAddressLine2('fooValue');   // WHERE address_line2 = 'fooValue'
     * $query->filterByAddressLine2('%fooValue%'); // WHERE address_line2 LIKE '%fooValue%'
     * </code>
     *
     * @param     string $addressLine2 The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return FoundationQuery The current query, for fluid interface
     */
    public function filterByAddressLine2($addressLine2 = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($addressLine2)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $addressLine2)) {
                $addressLine2 = str_replace('*', '%', $addressLine2);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(FoundationPeer::ADDRESS_LINE2, $addressLine2, $comparison);
    }

    /**
     * Filter the query on the email column
     *
     * Example usage:
     * <code>
     * $query->filterByEmail('fooValue');   // WHERE email = 'fooValue'
     * $query->filterByEmail('%fooValue%'); // WHERE email LIKE '%fooValue%'
     * </code>
     *
     * @param     string $email The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return FoundationQuery The current query, for fluid interface
     */
    public function filterByEmail($email = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($email)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $email)) {
                $email = str_replace('*', '%', $email);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(FoundationPeer::EMAIL, $email, $comparison);
    }

    /**
     * Filter the query on the phone column
     *
     * Example usage:
     * <code>
     * $query->filterByPhone('fooValue');   // WHERE phone = 'fooValue'
     * $query->filterByPhone('%fooValue%'); // WHERE phone LIKE '%fooValue%'
     * </code>
     *
     * @param     string $phone The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return FoundationQuery The current query, for fluid interface
     */
    public function filterByPhone($phone = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($phone)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $phone)) {
                $phone = str_replace('*', '%', $phone);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(FoundationPeer::PHONE, $phone, $comparison);
    }

    /**
     * Filter the query on the description column
     *
     * Example usage:
     * <code>
     * $query->filterByDescription('fooValue');   // WHERE description = 'fooValue'
     * $query->filterByDescription('%fooValue%'); // WHERE description LIKE '%fooValue%'
     * </code>
     *
     * @param     string $description The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return FoundationQuery The current query, for fluid interface
     */
    public function filterByDescription($description = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($description)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $description)) {
                $description = str_replace('*', '%', $description);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(FoundationPeer::DESCRIPTION, $description, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return FoundationQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(FoundationPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(FoundationPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(FoundationPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return FoundationQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(FoundationPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(FoundationPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(FoundationPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query by a related Page object
     *
     * @param   Page|PropelObjectCollection $page  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   FoundationQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByPage($page, $comparison = null)
    {
        if ($page instanceof Page) {
            return $this
                ->addUsingAlias(FoundationPeer::ID, $page->getFoundationId(), $comparison);
        } elseif ($page instanceof PropelObjectCollection) {
            return $this
                ->usePageQuery()
                ->filterByPrimaryKeys($page->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByPage() only accepts arguments of type Page or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Page relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return FoundationQuery The current query, for fluid interface
     */
    public function joinPage($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Page');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Page');
        }

        return $this;
    }

    /**
     * Use the Page relation Page object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   PageQuery A secondary query class using the current class as primary query
     */
    public function usePageQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinPage($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Page', 'PageQuery');
    }

    /**
     * Filter the query by a related UserEvent object
     *
     * @param   UserEvent|PropelObjectCollection $userEvent  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   FoundationQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByUserEvent($userEvent, $comparison = null)
    {
        if ($userEvent instanceof UserEvent) {
            return $this
                ->addUsingAlias(FoundationPeer::ID, $userEvent->getFoundationId(), $comparison);
        } elseif ($userEvent instanceof PropelObjectCollection) {
            return $this
                ->useUserEventQuery()
                ->filterByPrimaryKeys($userEvent->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByUserEvent() only accepts arguments of type UserEvent or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the UserEvent relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return FoundationQuery The current query, for fluid interface
     */
    public function joinUserEvent($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('UserEvent');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'UserEvent');
        }

        return $this;
    }

    /**
     * Use the UserEvent relation UserEvent object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   UserEventQuery A secondary query class using the current class as primary query
     */
    public function useUserEventQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinUserEvent($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'UserEvent', 'UserEventQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Foundation $foundation Object to remove from the list of results
     *
     * @return FoundationQuery The current query, for fluid interface
     */
    public function prune($foundation = null)
    {
        if ($foundation) {
            $this->addUsingAlias(FoundationPeer::ID, $foundation->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
