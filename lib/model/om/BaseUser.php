<?php


/**
 * Base class that represents a row from the 'user' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Sun May 19 11:09:02 2013
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseUser extends BaseObject implements Persistent
{
    /**
     * Peer class name
     */
    const PEER = 'UserPeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        UserPeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinit loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the id field.
     * @var        int
     */
    protected $id;

    /**
     * The value for the facebook_id field.
     * @var        string
     */
    protected $facebook_id;

    /**
     * The value for the first_name field.
     * @var        string
     */
    protected $first_name;

    /**
     * The value for the last_name field.
     * @var        string
     */
    protected $last_name;

    /**
     * The value for the gender field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $gender;

    /**
     * The value for the email field.
     * @var        string
     */
    protected $email;

    /**
     * The value for the birthsday field.
     * @var        string
     */
    protected $birthsday;

    /**
     * The value for the phone field.
     * @var        string
     */
    protected $phone;

    /**
     * The value for the last_ip field.
     * @var        string
     */
    protected $last_ip;

    /**
     * The value for the is_secured field.
     * @var        boolean
     */
    protected $is_secured;

    /**
     * The value for the long_token field.
     * @var        string
     */
    protected $long_token;

    /**
     * The value for the updated_at field.
     * @var        string
     */
    protected $updated_at;

    /**
     * The value for the created_at field.
     * @var        string
     */
    protected $created_at;

    /**
     * @var        PropelObjectCollection|Friend[] Collection to store aggregation of Friend objects.
     */
    protected $collFriendsRelatedByUserId;
    protected $collFriendsRelatedByUserIdPartial;

    /**
     * @var        PropelObjectCollection|Friend[] Collection to store aggregation of Friend objects.
     */
    protected $collFriendsRelatedByFriendId;
    protected $collFriendsRelatedByFriendIdPartial;

    /**
     * @var        PropelObjectCollection|Page[] Collection to store aggregation of Page objects.
     */
    protected $collPages;
    protected $collPagesPartial;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $friendsRelatedByUserIdScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $friendsRelatedByFriendIdScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $pagesScheduledForDeletion = null;

    /**
     * Applies default values to this object.
     * This method should be called from the object's constructor (or
     * equivalent initialization method).
     * @see        __construct()
     */
    public function applyDefaultValues()
    {
        $this->gender = false;
    }

    /**
     * Initializes internal state of BaseUser object.
     * @see        applyDefaults()
     */
    public function __construct()
    {
        parent::__construct();
        $this->applyDefaultValues();
    }

    /**
     * Get the [id] column value.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Get the [facebook_id] column value.
     *
     * @return string
     */
    public function getFacebookId()
    {
        return $this->facebook_id;
    }

    /**
     * Get the [first_name] column value.
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->first_name;
    }

    /**
     * Get the [last_name] column value.
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->last_name;
    }

    /**
     * Get the [gender] column value.
     *
     * @return boolean
     */
    public function getGender()
    {
        return $this->gender;
    }

    /**
     * Get the [email] column value.
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Get the [birthsday] column value.
     *
     * @return string
     */
    public function getBirthsday()
    {
        return $this->birthsday;
    }

    /**
     * Get the [phone] column value.
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->phone;
    }

    /**
     * Get the [last_ip] column value.
     *
     * @return string
     */
    public function getLastIp()
    {
        return $this->last_ip;
    }

    /**
     * Get the [is_secured] column value.
     *
     * @return boolean
     */
    public function getIsSecured()
    {
        return $this->is_secured;
    }

    /**
     * Get the [long_token] column value.
     *
     * @return string
     */
    public function getLongToken()
    {
        return $this->long_token;
    }

    /**
     * Get the [optionally formatted] temporal [updated_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getUpdatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->updated_at === null) {
            return null;
        }

        if ($this->updated_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->updated_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [created_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getCreatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->created_at === null) {
            return null;
        }

        if ($this->created_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->created_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Set the value of [id] column.
     *
     * @param int $v new value
     * @return User The current object (for fluent API support)
     */
    public function setId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = UserPeer::ID;
        }


        return $this;
    } // setId()

    /**
     * Set the value of [facebook_id] column.
     *
     * @param string $v new value
     * @return User The current object (for fluent API support)
     */
    public function setFacebookId($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->facebook_id !== $v) {
            $this->facebook_id = $v;
            $this->modifiedColumns[] = UserPeer::FACEBOOK_ID;
        }


        return $this;
    } // setFacebookId()

    /**
     * Set the value of [first_name] column.
     *
     * @param string $v new value
     * @return User The current object (for fluent API support)
     */
    public function setFirstName($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->first_name !== $v) {
            $this->first_name = $v;
            $this->modifiedColumns[] = UserPeer::FIRST_NAME;
        }


        return $this;
    } // setFirstName()

    /**
     * Set the value of [last_name] column.
     *
     * @param string $v new value
     * @return User The current object (for fluent API support)
     */
    public function setLastName($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->last_name !== $v) {
            $this->last_name = $v;
            $this->modifiedColumns[] = UserPeer::LAST_NAME;
        }


        return $this;
    } // setLastName()

    /**
     * Sets the value of the [gender] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return User The current object (for fluent API support)
     */
    public function setGender($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->gender !== $v) {
            $this->gender = $v;
            $this->modifiedColumns[] = UserPeer::GENDER;
        }


        return $this;
    } // setGender()

    /**
     * Set the value of [email] column.
     *
     * @param string $v new value
     * @return User The current object (for fluent API support)
     */
    public function setEmail($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->email !== $v) {
            $this->email = $v;
            $this->modifiedColumns[] = UserPeer::EMAIL;
        }


        return $this;
    } // setEmail()

    /**
     * Set the value of [birthsday] column.
     *
     * @param string $v new value
     * @return User The current object (for fluent API support)
     */
    public function setBirthsday($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->birthsday !== $v) {
            $this->birthsday = $v;
            $this->modifiedColumns[] = UserPeer::BIRTHSDAY;
        }


        return $this;
    } // setBirthsday()

    /**
     * Set the value of [phone] column.
     *
     * @param string $v new value
     * @return User The current object (for fluent API support)
     */
    public function setPhone($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->phone !== $v) {
            $this->phone = $v;
            $this->modifiedColumns[] = UserPeer::PHONE;
        }


        return $this;
    } // setPhone()

    /**
     * Set the value of [last_ip] column.
     *
     * @param string $v new value
     * @return User The current object (for fluent API support)
     */
    public function setLastIp($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->last_ip !== $v) {
            $this->last_ip = $v;
            $this->modifiedColumns[] = UserPeer::LAST_IP;
        }


        return $this;
    } // setLastIp()

    /**
     * Sets the value of the [is_secured] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return User The current object (for fluent API support)
     */
    public function setIsSecured($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->is_secured !== $v) {
            $this->is_secured = $v;
            $this->modifiedColumns[] = UserPeer::IS_SECURED;
        }


        return $this;
    } // setIsSecured()

    /**
     * Set the value of [long_token] column.
     *
     * @param string $v new value
     * @return User The current object (for fluent API support)
     */
    public function setLongToken($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->long_token !== $v) {
            $this->long_token = $v;
            $this->modifiedColumns[] = UserPeer::LONG_TOKEN;
        }


        return $this;
    } // setLongToken()

    /**
     * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return User The current object (for fluent API support)
     */
    public function setUpdatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->updated_at !== null || $dt !== null) {
            $currentDateAsString = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->updated_at = $newDateAsString;
                $this->modifiedColumns[] = UserPeer::UPDATED_AT;
            }
        } // if either are not null


        return $this;
    } // setUpdatedAt()

    /**
     * Sets the value of [created_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return User The current object (for fluent API support)
     */
    public function setCreatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->created_at !== null || $dt !== null) {
            $currentDateAsString = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->created_at = $newDateAsString;
                $this->modifiedColumns[] = UserPeer::CREATED_AT;
            }
        } // if either are not null


        return $this;
    } // setCreatedAt()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
            if ($this->gender !== false) {
                return false;
            }

        // otherwise, everything was equal, so return true
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param int $startcol 0-based offset column which indicates which restultset column to start with.
     * @param boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->facebook_id = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
            $this->first_name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
            $this->last_name = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
            $this->gender = ($row[$startcol + 4] !== null) ? (boolean) $row[$startcol + 4] : null;
            $this->email = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
            $this->birthsday = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
            $this->phone = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
            $this->last_ip = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
            $this->is_secured = ($row[$startcol + 9] !== null) ? (boolean) $row[$startcol + 9] : null;
            $this->long_token = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
            $this->updated_at = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
            $this->created_at = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }

            return $startcol + 13; // 13 = UserPeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating User object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param boolean $deep (optional) Whether to also de-associated any related objects.
     * @param PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = UserPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

            $this->collFriendsRelatedByUserId = null;

            $this->collFriendsRelatedByFriendId = null;

            $this->collPages = null;

        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = UserQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseUser:delete:pre') as $callable)
            {
              if (call_user_func($callable, $this, $con))
              {
                $con->commit();
                return;
              }
            }

            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseUser:delete:post') as $callable)
                {
                  call_user_func($callable, $this, $con);
                }

                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(UserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BaseUser:save:pre') as $callable)
            {
              if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
              {
                  $con->commit();
                return $affectedRows;
              }
            }

            // symfony_timestampable behavior
            if ($this->isModified() && !$this->isColumnModified(UserPeer::UPDATED_AT))
            {
                $this->setUpdatedAt(time());
            }
            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
                // symfony_timestampable behavior
                if (!$this->isColumnModified(UserPeer::CREATED_AT))
                {
                  $this->setCreatedAt(time());
                }

            } else {
                $ret = $ret && $this->preUpdate($con);
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BaseUser:save:post') as $callable)
                {
                  call_user_func($callable, $this, $con, $affectedRows);
                }

                UserPeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            if ($this->friendsRelatedByUserIdScheduledForDeletion !== null) {
                if (!$this->friendsRelatedByUserIdScheduledForDeletion->isEmpty()) {
                    foreach ($this->friendsRelatedByUserIdScheduledForDeletion as $friendRelatedByUserId) {
                        // need to save related object because we set the relation to null
                        $friendRelatedByUserId->save($con);
                    }
                    $this->friendsRelatedByUserIdScheduledForDeletion = null;
                }
            }

            if ($this->collFriendsRelatedByUserId !== null) {
                foreach ($this->collFriendsRelatedByUserId as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->friendsRelatedByFriendIdScheduledForDeletion !== null) {
                if (!$this->friendsRelatedByFriendIdScheduledForDeletion->isEmpty()) {
                    foreach ($this->friendsRelatedByFriendIdScheduledForDeletion as $friendRelatedByFriendId) {
                        // need to save related object because we set the relation to null
                        $friendRelatedByFriendId->save($con);
                    }
                    $this->friendsRelatedByFriendIdScheduledForDeletion = null;
                }
            }

            if ($this->collFriendsRelatedByFriendId !== null) {
                foreach ($this->collFriendsRelatedByFriendId as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->pagesScheduledForDeletion !== null) {
                if (!$this->pagesScheduledForDeletion->isEmpty()) {
                    foreach ($this->pagesScheduledForDeletion as $page) {
                        // need to save related object because we set the relation to null
                        $page->save($con);
                    }
                    $this->pagesScheduledForDeletion = null;
                }
            }

            if ($this->collPages !== null) {
                foreach ($this->collPages as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;

        $this->modifiedColumns[] = UserPeer::ID;
        if (null !== $this->id) {
            throw new PropelException('Cannot insert a value for auto-increment primary key (' . UserPeer::ID . ')');
        }

         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(UserPeer::ID)) {
            $modifiedColumns[':p' . $index++]  = '`ID`';
        }
        if ($this->isColumnModified(UserPeer::FACEBOOK_ID)) {
            $modifiedColumns[':p' . $index++]  = '`FACEBOOK_ID`';
        }
        if ($this->isColumnModified(UserPeer::FIRST_NAME)) {
            $modifiedColumns[':p' . $index++]  = '`FIRST_NAME`';
        }
        if ($this->isColumnModified(UserPeer::LAST_NAME)) {
            $modifiedColumns[':p' . $index++]  = '`LAST_NAME`';
        }
        if ($this->isColumnModified(UserPeer::GENDER)) {
            $modifiedColumns[':p' . $index++]  = '`GENDER`';
        }
        if ($this->isColumnModified(UserPeer::EMAIL)) {
            $modifiedColumns[':p' . $index++]  = '`EMAIL`';
        }
        if ($this->isColumnModified(UserPeer::BIRTHSDAY)) {
            $modifiedColumns[':p' . $index++]  = '`BIRTHSDAY`';
        }
        if ($this->isColumnModified(UserPeer::PHONE)) {
            $modifiedColumns[':p' . $index++]  = '`PHONE`';
        }
        if ($this->isColumnModified(UserPeer::LAST_IP)) {
            $modifiedColumns[':p' . $index++]  = '`LAST_IP`';
        }
        if ($this->isColumnModified(UserPeer::IS_SECURED)) {
            $modifiedColumns[':p' . $index++]  = '`IS_SECURED`';
        }
        if ($this->isColumnModified(UserPeer::LONG_TOKEN)) {
            $modifiedColumns[':p' . $index++]  = '`LONG_TOKEN`';
        }
        if ($this->isColumnModified(UserPeer::UPDATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`UPDATED_AT`';
        }
        if ($this->isColumnModified(UserPeer::CREATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`CREATED_AT`';
        }

        $sql = sprintf(
            'INSERT INTO `user` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`ID`':
                        $stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
                        break;
                    case '`FACEBOOK_ID`':
                        $stmt->bindValue($identifier, $this->facebook_id, PDO::PARAM_INT);
                        break;
                    case '`FIRST_NAME`':
                        $stmt->bindValue($identifier, $this->first_name, PDO::PARAM_STR);
                        break;
                    case '`LAST_NAME`':
                        $stmt->bindValue($identifier, $this->last_name, PDO::PARAM_STR);
                        break;
                    case '`GENDER`':
                        $stmt->bindValue($identifier, (int) $this->gender, PDO::PARAM_INT);
                        break;
                    case '`EMAIL`':
                        $stmt->bindValue($identifier, $this->email, PDO::PARAM_STR);
                        break;
                    case '`BIRTHSDAY`':
                        $stmt->bindValue($identifier, $this->birthsday, PDO::PARAM_STR);
                        break;
                    case '`PHONE`':
                        $stmt->bindValue($identifier, $this->phone, PDO::PARAM_STR);
                        break;
                    case '`LAST_IP`':
                        $stmt->bindValue($identifier, $this->last_ip, PDO::PARAM_STR);
                        break;
                    case '`IS_SECURED`':
                        $stmt->bindValue($identifier, (int) $this->is_secured, PDO::PARAM_INT);
                        break;
                    case '`LONG_TOKEN`':
                        $stmt->bindValue($identifier, $this->long_token, PDO::PARAM_STR);
                        break;
                    case '`UPDATED_AT`':
                        $stmt->bindValue($identifier, $this->updated_at, PDO::PARAM_STR);
                        break;
                    case '`CREATED_AT`':
                        $stmt->bindValue($identifier, $this->created_at, PDO::PARAM_STR);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        try {
            $pk = $con->lastInsertId();
        } catch (Exception $e) {
            throw new PropelException('Unable to get autoincrement id.', $e);
        }
        $this->setId($pk);

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        } else {
            $this->validationFailures = $res;

            return false;
        }
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggreagated array of ValidationFailed objects will be returned.
     *
     * @param array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            if (($retval = UserPeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }


                if ($this->collFriendsRelatedByUserId !== null) {
                    foreach ($this->collFriendsRelatedByUserId as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collFriendsRelatedByFriendId !== null) {
                    foreach ($this->collFriendsRelatedByFriendId as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collPages !== null) {
                    foreach ($this->collPages as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }


            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param string $name name
     * @param string $type The type of fieldname the $name is of:
     *               one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *               BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *               Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = UserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getId();
                break;
            case 1:
                return $this->getFacebookId();
                break;
            case 2:
                return $this->getFirstName();
                break;
            case 3:
                return $this->getLastName();
                break;
            case 4:
                return $this->getGender();
                break;
            case 5:
                return $this->getEmail();
                break;
            case 6:
                return $this->getBirthsday();
                break;
            case 7:
                return $this->getPhone();
                break;
            case 8:
                return $this->getLastIp();
                break;
            case 9:
                return $this->getIsSecured();
                break;
            case 10:
                return $this->getLongToken();
                break;
            case 11:
                return $this->getUpdatedAt();
                break;
            case 12:
                return $this->getCreatedAt();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to true.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
    {
        if (isset($alreadyDumpedObjects['User'][$this->getPrimaryKey()])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['User'][$this->getPrimaryKey()] = true;
        $keys = UserPeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getId(),
            $keys[1] => $this->getFacebookId(),
            $keys[2] => $this->getFirstName(),
            $keys[3] => $this->getLastName(),
            $keys[4] => $this->getGender(),
            $keys[5] => $this->getEmail(),
            $keys[6] => $this->getBirthsday(),
            $keys[7] => $this->getPhone(),
            $keys[8] => $this->getLastIp(),
            $keys[9] => $this->getIsSecured(),
            $keys[10] => $this->getLongToken(),
            $keys[11] => $this->getUpdatedAt(),
            $keys[12] => $this->getCreatedAt(),
        );
        if ($includeForeignObjects) {
            if (null !== $this->collFriendsRelatedByUserId) {
                $result['FriendsRelatedByUserId'] = $this->collFriendsRelatedByUserId->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collFriendsRelatedByFriendId) {
                $result['FriendsRelatedByFriendId'] = $this->collFriendsRelatedByFriendId->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collPages) {
                $result['Pages'] = $this->collPages->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
        }

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @param string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = UserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setId($value);
                break;
            case 1:
                $this->setFacebookId($value);
                break;
            case 2:
                $this->setFirstName($value);
                break;
            case 3:
                $this->setLastName($value);
                break;
            case 4:
                $this->setGender($value);
                break;
            case 5:
                $this->setEmail($value);
                break;
            case 6:
                $this->setBirthsday($value);
                break;
            case 7:
                $this->setPhone($value);
                break;
            case 8:
                $this->setLastIp($value);
                break;
            case 9:
                $this->setIsSecured($value);
                break;
            case 10:
                $this->setLongToken($value);
                break;
            case 11:
                $this->setUpdatedAt($value);
                break;
            case 12:
                $this->setCreatedAt($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param array  $arr     An array to populate the object from.
     * @param string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = UserPeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setFacebookId($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setFirstName($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setLastName($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setGender($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setEmail($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setBirthsday($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setPhone($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setLastIp($arr[$keys[8]]);
        if (array_key_exists($keys[9], $arr)) $this->setIsSecured($arr[$keys[9]]);
        if (array_key_exists($keys[10], $arr)) $this->setLongToken($arr[$keys[10]]);
        if (array_key_exists($keys[11], $arr)) $this->setUpdatedAt($arr[$keys[11]]);
        if (array_key_exists($keys[12], $arr)) $this->setCreatedAt($arr[$keys[12]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(UserPeer::DATABASE_NAME);

        if ($this->isColumnModified(UserPeer::ID)) $criteria->add(UserPeer::ID, $this->id);
        if ($this->isColumnModified(UserPeer::FACEBOOK_ID)) $criteria->add(UserPeer::FACEBOOK_ID, $this->facebook_id);
        if ($this->isColumnModified(UserPeer::FIRST_NAME)) $criteria->add(UserPeer::FIRST_NAME, $this->first_name);
        if ($this->isColumnModified(UserPeer::LAST_NAME)) $criteria->add(UserPeer::LAST_NAME, $this->last_name);
        if ($this->isColumnModified(UserPeer::GENDER)) $criteria->add(UserPeer::GENDER, $this->gender);
        if ($this->isColumnModified(UserPeer::EMAIL)) $criteria->add(UserPeer::EMAIL, $this->email);
        if ($this->isColumnModified(UserPeer::BIRTHSDAY)) $criteria->add(UserPeer::BIRTHSDAY, $this->birthsday);
        if ($this->isColumnModified(UserPeer::PHONE)) $criteria->add(UserPeer::PHONE, $this->phone);
        if ($this->isColumnModified(UserPeer::LAST_IP)) $criteria->add(UserPeer::LAST_IP, $this->last_ip);
        if ($this->isColumnModified(UserPeer::IS_SECURED)) $criteria->add(UserPeer::IS_SECURED, $this->is_secured);
        if ($this->isColumnModified(UserPeer::LONG_TOKEN)) $criteria->add(UserPeer::LONG_TOKEN, $this->long_token);
        if ($this->isColumnModified(UserPeer::UPDATED_AT)) $criteria->add(UserPeer::UPDATED_AT, $this->updated_at);
        if ($this->isColumnModified(UserPeer::CREATED_AT)) $criteria->add(UserPeer::CREATED_AT, $this->created_at);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(UserPeer::DATABASE_NAME);
        $criteria->add(UserPeer::ID, $this->id);

        return $criteria;
    }

    /**
     * Returns the primary key for this object (row).
     * @return int
     */
    public function getPrimaryKey()
    {
        return $this->getId();
    }

    /**
     * Generic method to set the primary key (id column).
     *
     * @param  int $key Primary key.
     * @return void
     */
    public function setPrimaryKey($key)
    {
        $this->setId($key);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return null === $this->getId();
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param object $copyObj An object of User (or compatible) type.
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setFacebookId($this->getFacebookId());
        $copyObj->setFirstName($this->getFirstName());
        $copyObj->setLastName($this->getLastName());
        $copyObj->setGender($this->getGender());
        $copyObj->setEmail($this->getEmail());
        $copyObj->setBirthsday($this->getBirthsday());
        $copyObj->setPhone($this->getPhone());
        $copyObj->setLastIp($this->getLastIp());
        $copyObj->setIsSecured($this->getIsSecured());
        $copyObj->setLongToken($this->getLongToken());
        $copyObj->setUpdatedAt($this->getUpdatedAt());
        $copyObj->setCreatedAt($this->getCreatedAt());

        if ($deepCopy && !$this->startCopy) {
            // important: temporarily setNew(false) because this affects the behavior of
            // the getter/setter methods for fkey referrer objects.
            $copyObj->setNew(false);
            // store object hash to prevent cycle
            $this->startCopy = true;

            foreach ($this->getFriendsRelatedByUserId() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addFriendRelatedByUserId($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getFriendsRelatedByFriendId() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addFriendRelatedByFriendId($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getPages() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addPage($relObj->copy($deepCopy));
                }
            }

            //unflag object copy
            $this->startCopy = false;
        } // if ($deepCopy)

        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setId(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return User Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return UserPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new UserPeer();
        }

        return self::$peer;
    }


    /**
     * Initializes a collection based on the name of a relation.
     * Avoids crafting an 'init[$relationName]s' method name
     * that wouldn't work when StandardEnglishPluralizer is used.
     *
     * @param string $relationName The name of the relation to initialize
     * @return void
     */
    public function initRelation($relationName)
    {
        if ('FriendRelatedByUserId' == $relationName) {
            $this->initFriendsRelatedByUserId();
        }
        if ('FriendRelatedByFriendId' == $relationName) {
            $this->initFriendsRelatedByFriendId();
        }
        if ('Page' == $relationName) {
            $this->initPages();
        }
    }

    /**
     * Clears out the collFriendsRelatedByUserId collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addFriendsRelatedByUserId()
     */
    public function clearFriendsRelatedByUserId()
    {
        $this->collFriendsRelatedByUserId = null; // important to set this to null since that means it is uninitialized
        $this->collFriendsRelatedByUserIdPartial = null;
    }

    /**
     * reset is the collFriendsRelatedByUserId collection loaded partially
     *
     * @return void
     */
    public function resetPartialFriendsRelatedByUserId($v = true)
    {
        $this->collFriendsRelatedByUserIdPartial = $v;
    }

    /**
     * Initializes the collFriendsRelatedByUserId collection.
     *
     * By default this just sets the collFriendsRelatedByUserId collection to an empty array (like clearcollFriendsRelatedByUserId());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initFriendsRelatedByUserId($overrideExisting = true)
    {
        if (null !== $this->collFriendsRelatedByUserId && !$overrideExisting) {
            return;
        }
        $this->collFriendsRelatedByUserId = new PropelObjectCollection();
        $this->collFriendsRelatedByUserId->setModel('Friend');
    }

    /**
     * Gets an array of Friend objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this User is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Friend[] List of Friend objects
     * @throws PropelException
     */
    public function getFriendsRelatedByUserId($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collFriendsRelatedByUserIdPartial && !$this->isNew();
        if (null === $this->collFriendsRelatedByUserId || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collFriendsRelatedByUserId) {
                // return empty collection
                $this->initFriendsRelatedByUserId();
            } else {
                $collFriendsRelatedByUserId = FriendQuery::create(null, $criteria)
                    ->filterByUserRelatedByUserId($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collFriendsRelatedByUserIdPartial && count($collFriendsRelatedByUserId)) {
                      $this->initFriendsRelatedByUserId(false);

                      foreach($collFriendsRelatedByUserId as $obj) {
                        if (false == $this->collFriendsRelatedByUserId->contains($obj)) {
                          $this->collFriendsRelatedByUserId->append($obj);
                        }
                      }

                      $this->collFriendsRelatedByUserIdPartial = true;
                    }

                    return $collFriendsRelatedByUserId;
                }

                if($partial && $this->collFriendsRelatedByUserId) {
                    foreach($this->collFriendsRelatedByUserId as $obj) {
                        if($obj->isNew()) {
                            $collFriendsRelatedByUserId[] = $obj;
                        }
                    }
                }

                $this->collFriendsRelatedByUserId = $collFriendsRelatedByUserId;
                $this->collFriendsRelatedByUserIdPartial = false;
            }
        }

        return $this->collFriendsRelatedByUserId;
    }

    /**
     * Sets a collection of FriendRelatedByUserId objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $friendsRelatedByUserId A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setFriendsRelatedByUserId(PropelCollection $friendsRelatedByUserId, PropelPDO $con = null)
    {
        $this->friendsRelatedByUserIdScheduledForDeletion = $this->getFriendsRelatedByUserId(new Criteria(), $con)->diff($friendsRelatedByUserId);

        foreach ($this->friendsRelatedByUserIdScheduledForDeletion as $friendRelatedByUserIdRemoved) {
            $friendRelatedByUserIdRemoved->setUserRelatedByUserId(null);
        }

        $this->collFriendsRelatedByUserId = null;
        foreach ($friendsRelatedByUserId as $friendRelatedByUserId) {
            $this->addFriendRelatedByUserId($friendRelatedByUserId);
        }

        $this->collFriendsRelatedByUserId = $friendsRelatedByUserId;
        $this->collFriendsRelatedByUserIdPartial = false;
    }

    /**
     * Returns the number of related Friend objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Friend objects.
     * @throws PropelException
     */
    public function countFriendsRelatedByUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collFriendsRelatedByUserIdPartial && !$this->isNew();
        if (null === $this->collFriendsRelatedByUserId || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collFriendsRelatedByUserId) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getFriendsRelatedByUserId());
                }
                $query = FriendQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUserRelatedByUserId($this)
                    ->count($con);
            }
        } else {
            return count($this->collFriendsRelatedByUserId);
        }
    }

    /**
     * Method called to associate a Friend object to this object
     * through the Friend foreign key attribute.
     *
     * @param    Friend $l Friend
     * @return User The current object (for fluent API support)
     */
    public function addFriendRelatedByUserId(Friend $l)
    {
        if ($this->collFriendsRelatedByUserId === null) {
            $this->initFriendsRelatedByUserId();
            $this->collFriendsRelatedByUserIdPartial = true;
        }
        if (!$this->collFriendsRelatedByUserId->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddFriendRelatedByUserId($l);
        }

        return $this;
    }

    /**
     * @param	FriendRelatedByUserId $friendRelatedByUserId The friendRelatedByUserId object to add.
     */
    protected function doAddFriendRelatedByUserId($friendRelatedByUserId)
    {
        $this->collFriendsRelatedByUserId[]= $friendRelatedByUserId;
        $friendRelatedByUserId->setUserRelatedByUserId($this);
    }

    /**
     * @param	FriendRelatedByUserId $friendRelatedByUserId The friendRelatedByUserId object to remove.
     */
    public function removeFriendRelatedByUserId($friendRelatedByUserId)
    {
        if ($this->getFriendsRelatedByUserId()->contains($friendRelatedByUserId)) {
            $this->collFriendsRelatedByUserId->remove($this->collFriendsRelatedByUserId->search($friendRelatedByUserId));
            if (null === $this->friendsRelatedByUserIdScheduledForDeletion) {
                $this->friendsRelatedByUserIdScheduledForDeletion = clone $this->collFriendsRelatedByUserId;
                $this->friendsRelatedByUserIdScheduledForDeletion->clear();
            }
            $this->friendsRelatedByUserIdScheduledForDeletion[]= $friendRelatedByUserId;
            $friendRelatedByUserId->setUserRelatedByUserId(null);
        }
    }

    /**
     * Clears out the collFriendsRelatedByFriendId collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addFriendsRelatedByFriendId()
     */
    public function clearFriendsRelatedByFriendId()
    {
        $this->collFriendsRelatedByFriendId = null; // important to set this to null since that means it is uninitialized
        $this->collFriendsRelatedByFriendIdPartial = null;
    }

    /**
     * reset is the collFriendsRelatedByFriendId collection loaded partially
     *
     * @return void
     */
    public function resetPartialFriendsRelatedByFriendId($v = true)
    {
        $this->collFriendsRelatedByFriendIdPartial = $v;
    }

    /**
     * Initializes the collFriendsRelatedByFriendId collection.
     *
     * By default this just sets the collFriendsRelatedByFriendId collection to an empty array (like clearcollFriendsRelatedByFriendId());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initFriendsRelatedByFriendId($overrideExisting = true)
    {
        if (null !== $this->collFriendsRelatedByFriendId && !$overrideExisting) {
            return;
        }
        $this->collFriendsRelatedByFriendId = new PropelObjectCollection();
        $this->collFriendsRelatedByFriendId->setModel('Friend');
    }

    /**
     * Gets an array of Friend objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this User is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Friend[] List of Friend objects
     * @throws PropelException
     */
    public function getFriendsRelatedByFriendId($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collFriendsRelatedByFriendIdPartial && !$this->isNew();
        if (null === $this->collFriendsRelatedByFriendId || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collFriendsRelatedByFriendId) {
                // return empty collection
                $this->initFriendsRelatedByFriendId();
            } else {
                $collFriendsRelatedByFriendId = FriendQuery::create(null, $criteria)
                    ->filterByUserRelatedByFriendId($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collFriendsRelatedByFriendIdPartial && count($collFriendsRelatedByFriendId)) {
                      $this->initFriendsRelatedByFriendId(false);

                      foreach($collFriendsRelatedByFriendId as $obj) {
                        if (false == $this->collFriendsRelatedByFriendId->contains($obj)) {
                          $this->collFriendsRelatedByFriendId->append($obj);
                        }
                      }

                      $this->collFriendsRelatedByFriendIdPartial = true;
                    }

                    return $collFriendsRelatedByFriendId;
                }

                if($partial && $this->collFriendsRelatedByFriendId) {
                    foreach($this->collFriendsRelatedByFriendId as $obj) {
                        if($obj->isNew()) {
                            $collFriendsRelatedByFriendId[] = $obj;
                        }
                    }
                }

                $this->collFriendsRelatedByFriendId = $collFriendsRelatedByFriendId;
                $this->collFriendsRelatedByFriendIdPartial = false;
            }
        }

        return $this->collFriendsRelatedByFriendId;
    }

    /**
     * Sets a collection of FriendRelatedByFriendId objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $friendsRelatedByFriendId A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setFriendsRelatedByFriendId(PropelCollection $friendsRelatedByFriendId, PropelPDO $con = null)
    {
        $this->friendsRelatedByFriendIdScheduledForDeletion = $this->getFriendsRelatedByFriendId(new Criteria(), $con)->diff($friendsRelatedByFriendId);

        foreach ($this->friendsRelatedByFriendIdScheduledForDeletion as $friendRelatedByFriendIdRemoved) {
            $friendRelatedByFriendIdRemoved->setUserRelatedByFriendId(null);
        }

        $this->collFriendsRelatedByFriendId = null;
        foreach ($friendsRelatedByFriendId as $friendRelatedByFriendId) {
            $this->addFriendRelatedByFriendId($friendRelatedByFriendId);
        }

        $this->collFriendsRelatedByFriendId = $friendsRelatedByFriendId;
        $this->collFriendsRelatedByFriendIdPartial = false;
    }

    /**
     * Returns the number of related Friend objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Friend objects.
     * @throws PropelException
     */
    public function countFriendsRelatedByFriendId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collFriendsRelatedByFriendIdPartial && !$this->isNew();
        if (null === $this->collFriendsRelatedByFriendId || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collFriendsRelatedByFriendId) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getFriendsRelatedByFriendId());
                }
                $query = FriendQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUserRelatedByFriendId($this)
                    ->count($con);
            }
        } else {
            return count($this->collFriendsRelatedByFriendId);
        }
    }

    /**
     * Method called to associate a Friend object to this object
     * through the Friend foreign key attribute.
     *
     * @param    Friend $l Friend
     * @return User The current object (for fluent API support)
     */
    public function addFriendRelatedByFriendId(Friend $l)
    {
        if ($this->collFriendsRelatedByFriendId === null) {
            $this->initFriendsRelatedByFriendId();
            $this->collFriendsRelatedByFriendIdPartial = true;
        }
        if (!$this->collFriendsRelatedByFriendId->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddFriendRelatedByFriendId($l);
        }

        return $this;
    }

    /**
     * @param	FriendRelatedByFriendId $friendRelatedByFriendId The friendRelatedByFriendId object to add.
     */
    protected function doAddFriendRelatedByFriendId($friendRelatedByFriendId)
    {
        $this->collFriendsRelatedByFriendId[]= $friendRelatedByFriendId;
        $friendRelatedByFriendId->setUserRelatedByFriendId($this);
    }

    /**
     * @param	FriendRelatedByFriendId $friendRelatedByFriendId The friendRelatedByFriendId object to remove.
     */
    public function removeFriendRelatedByFriendId($friendRelatedByFriendId)
    {
        if ($this->getFriendsRelatedByFriendId()->contains($friendRelatedByFriendId)) {
            $this->collFriendsRelatedByFriendId->remove($this->collFriendsRelatedByFriendId->search($friendRelatedByFriendId));
            if (null === $this->friendsRelatedByFriendIdScheduledForDeletion) {
                $this->friendsRelatedByFriendIdScheduledForDeletion = clone $this->collFriendsRelatedByFriendId;
                $this->friendsRelatedByFriendIdScheduledForDeletion->clear();
            }
            $this->friendsRelatedByFriendIdScheduledForDeletion[]= $friendRelatedByFriendId;
            $friendRelatedByFriendId->setUserRelatedByFriendId(null);
        }
    }

    /**
     * Clears out the collPages collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addPages()
     */
    public function clearPages()
    {
        $this->collPages = null; // important to set this to null since that means it is uninitialized
        $this->collPagesPartial = null;
    }

    /**
     * reset is the collPages collection loaded partially
     *
     * @return void
     */
    public function resetPartialPages($v = true)
    {
        $this->collPagesPartial = $v;
    }

    /**
     * Initializes the collPages collection.
     *
     * By default this just sets the collPages collection to an empty array (like clearcollPages());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initPages($overrideExisting = true)
    {
        if (null !== $this->collPages && !$overrideExisting) {
            return;
        }
        $this->collPages = new PropelObjectCollection();
        $this->collPages->setModel('Page');
    }

    /**
     * Gets an array of Page objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this User is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Page[] List of Page objects
     * @throws PropelException
     */
    public function getPages($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collPagesPartial && !$this->isNew();
        if (null === $this->collPages || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collPages) {
                // return empty collection
                $this->initPages();
            } else {
                $collPages = PageQuery::create(null, $criteria)
                    ->filterByUser($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collPagesPartial && count($collPages)) {
                      $this->initPages(false);

                      foreach($collPages as $obj) {
                        if (false == $this->collPages->contains($obj)) {
                          $this->collPages->append($obj);
                        }
                      }

                      $this->collPagesPartial = true;
                    }

                    return $collPages;
                }

                if($partial && $this->collPages) {
                    foreach($this->collPages as $obj) {
                        if($obj->isNew()) {
                            $collPages[] = $obj;
                        }
                    }
                }

                $this->collPages = $collPages;
                $this->collPagesPartial = false;
            }
        }

        return $this->collPages;
    }

    /**
     * Sets a collection of Page objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $pages A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setPages(PropelCollection $pages, PropelPDO $con = null)
    {
        $this->pagesScheduledForDeletion = $this->getPages(new Criteria(), $con)->diff($pages);

        foreach ($this->pagesScheduledForDeletion as $pageRemoved) {
            $pageRemoved->setUser(null);
        }

        $this->collPages = null;
        foreach ($pages as $page) {
            $this->addPage($page);
        }

        $this->collPages = $pages;
        $this->collPagesPartial = false;
    }

    /**
     * Returns the number of related Page objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Page objects.
     * @throws PropelException
     */
    public function countPages(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collPagesPartial && !$this->isNew();
        if (null === $this->collPages || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collPages) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getPages());
                }
                $query = PageQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByUser($this)
                    ->count($con);
            }
        } else {
            return count($this->collPages);
        }
    }

    /**
     * Method called to associate a Page object to this object
     * through the Page foreign key attribute.
     *
     * @param    Page $l Page
     * @return User The current object (for fluent API support)
     */
    public function addPage(Page $l)
    {
        if ($this->collPages === null) {
            $this->initPages();
            $this->collPagesPartial = true;
        }
        if (!$this->collPages->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddPage($l);
        }

        return $this;
    }

    /**
     * @param	Page $page The page object to add.
     */
    protected function doAddPage($page)
    {
        $this->collPages[]= $page;
        $page->setUser($this);
    }

    /**
     * @param	Page $page The page object to remove.
     */
    public function removePage($page)
    {
        if ($this->getPages()->contains($page)) {
            $this->collPages->remove($this->collPages->search($page));
            if (null === $this->pagesScheduledForDeletion) {
                $this->pagesScheduledForDeletion = clone $this->collPages;
                $this->pagesScheduledForDeletion->clear();
            }
            $this->pagesScheduledForDeletion[]= $page;
            $page->setUser(null);
        }
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->id = null;
        $this->facebook_id = null;
        $this->first_name = null;
        $this->last_name = null;
        $this->gender = null;
        $this->email = null;
        $this->birthsday = null;
        $this->phone = null;
        $this->last_ip = null;
        $this->is_secured = null;
        $this->long_token = null;
        $this->updated_at = null;
        $this->created_at = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->clearAllReferences();
        $this->applyDefaultValues();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volumne/high-memory operations.
     *
     * @param boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep) {
            if ($this->collFriendsRelatedByUserId) {
                foreach ($this->collFriendsRelatedByUserId as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collFriendsRelatedByFriendId) {
                foreach ($this->collFriendsRelatedByFriendId as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collPages) {
                foreach ($this->collPages as $o) {
                    $o->clearAllReferences($deep);
                }
            }
        } // if ($deep)

        if ($this->collFriendsRelatedByUserId instanceof PropelCollection) {
            $this->collFriendsRelatedByUserId->clearIterator();
        }
        $this->collFriendsRelatedByUserId = null;
        if ($this->collFriendsRelatedByFriendId instanceof PropelCollection) {
            $this->collFriendsRelatedByFriendId->clearIterator();
        }
        $this->collFriendsRelatedByFriendId = null;
        if ($this->collPages instanceof PropelCollection) {
            $this->collPages->clearIterator();
        }
        $this->collPages = null;
    }

    /**
     * return the string representation of this object
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this->exportTo(UserPeer::DEFAULT_STRING_FORMAT);
    }

    /**
     * return true is the object is in saving state
     *
     * @return boolean
     */
    public function isAlreadyInSave()
    {
        return $this->alreadyInSave;
    }

    /**
     * Catches calls to virtual methods
     */
    public function __call($name, $params)
    {

        // symfony_behaviors behavior
        if ($callable = sfMixer::getCallable('BaseUser:' . $name))
        {
          array_unshift($params, $this);
          return call_user_func_array($callable, $params);
        }


        return parent::__call($name, $params);
    }

}
